// Function to sort hospitals by rating and reviews 
// (descending) 
void sortByRating(struct Hospital hospitals[], int n) 
{ 
	// Implement sorting logic (e.g., based on rating and 
	// reviews) 
	for (int i = 0; i < n - 1; i++) { 
		for (int j = 0; j < n - i - 1; j++) { 
			if (hospitals[j].rating * hospitals[j].reviews 
				< hospitals[j + 1].rating 
					* hospitals[j + 1].reviews) { 
				struct Hospital temp = hospitals[j]; 
				hospitals[j] = hospitals[j + 1]; 
				hospitals[j + 1] = temp; 
			} 
		} 
	} 
} 

// Function to print hospitals in a specific city 
// (case-insensitive) 
void printHospitalsInCity(struct Hospital hospitals[]) 
{ 
	char city[50]; 
	int hospitalsFound 
		= 0; // Counter for hospitals found in the city 

	printf("Enter city name (X, Y or Z): "); 
	scanf("%s", city); 

	printf("Hospitals in %s:\n", city); 

	for (int i = 0; i < 5; i++) { 
		// Use strcasecmp for case-insensitive comparison 
		if (strcasecmp(hospitals[i].city, city) == 0) { 
			printf("Hospital Name: %s\n", 
				hospitals[i].name); 
			printf("City: %s\n", hospitals[i].city); 
			printf("Total Beds: %d\n", hospitals[i].beds); 
			printf("Price per Bed: $%.2f\n", 
				hospitals[i].price); 
			printf("Rating: %.1f\n", hospitals[i].rating); 
			printf("Reviews: %d\n", hospitals[i].reviews); 
			printf("\n"); 
			hospitalsFound++; 
		} 
	} 

	if (hospitalsFound == 0) { 
		printf("No hospitals found in %s\n", city); 
	} 
} 

// Function to sort hospitals by available beds (descending) 
void sortByBeds(struct Hospital hospitals[], int n) 
{ 
	// Implement sorting logic (e.g., bubble sort) 
	for (int i = 0; i < n - 1; i++) { 
		for (int j = 0; j < n - i - 1; j++) { 
			if (hospitals[j].beds < hospitals[j + 1].beds) { 
				struct Hospital temp = hospitals[j]; 
				hospitals[j] = hospitals[j + 1]; 
				hospitals[j + 1] = temp; 
			} 
		} 
	} 
} 

// Function to print patient data 
void printPatient(struct Patient patient) 
{ 
	printf("Patient Name: %s\n", patient.name); 
	printf("Age: %d\n", patient.age); 
	printf("\n"); 
} 

